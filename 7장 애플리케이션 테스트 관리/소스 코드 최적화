# 소스 코드 최적화

- 나쁜코드를 배제하고 클린 코드로 작성
- 클린코드 : 누구나 쉽게 이해하고 수정 및 변경이 간단함
- 나쁜코드 : 로직이 복잡하고 이해하기 어려운 코드
  - 스파게티 코드 : 로직이 서로 복잡하게 얽혀 있는 코드
  - 외계인 코드 : 아주 오래되거나 참고문서 또는 개발자가 없어 유지 보수 작업이 어려운 코드



### 클린 코드 작성 원칙

| 가독성        | 코드를 쉽게 이해할 수 있음                                   |
| ------------- | ------------------------------------------------------------ |
| 단순성        | 코드를 간단하게 작성함                                       |
| 의존성 배제   | 코드가 다른 모듈에 영향을 최소화함                           |
| 중복성 최소화 | 중복 코드가 적음                                             |
| 추상화        | 상위 클래스,메소드,함수에서 간략하게 애플리케이션 특성을 나타내고, 상세 내용은 하위 특성에 구현함 |



### 소스 코드 최적화 유형

- 클래스 분할 배치 : 하나의 클래스에는 하나의 역할만 수행하도록 응집도를 높임
- 느슨한 결합 : 인터페이스 클래스를 이용하여 추상화된 자료 구조와 메소드를 구현함으로써 클래스 간의 의존성을 낮춤



### 소스 코드 품질 분석 도구

- 정적, 동적 분석 도구로 나뉜다

  | 정적 분석 도구 | 작성한 소스 코드를 실행하지 않고 코딩 표준이나 코딩 스타일, 결함 등을 확인하고 코드 분석 도구 |
  | -------------- | ------------------------------------------------------------ |
  | 동적 분석 도구 | 작성한 소스 코드를 실행하여 코드에 존재하는 메모리 누수, 스레드 결함 등을 분석하는 도구 ( Avalanche, Valgrind ) |

  

### 소스 코드 품질 분석 도구의 종류

| pmd        | 소스 코드에 대한 미사용 변수, 최적화되지 않은 코드 등 결함을 유발할 수 있는 코드를 검사함 |
| ---------- | ------------------------------------------------------------ |
| cppcheck   | c/c++ 코드에 대한 메모리 누수, 오버 플로우 등을 분석         |
| SonarQube  | 중복 코드, 복잡도, 코딩 설계 등을 분석하는소스 분석 통합 플랫폼 |
| checkstyle | 자바 코드에 대해 소스 코드 표준을 따르고 있는지 검사         |
| ccm        | 다양한 언어의 코드 복잡도를 분석                             |
| cobertura  | 자바 언어의 소스 코드 복잡도 분석 및 테스트 커버리지를 측정  |

